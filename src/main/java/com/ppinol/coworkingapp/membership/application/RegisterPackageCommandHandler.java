package com.ppinol.coworkingapp.membership.application;

import com.ppinol.coworkingapp.membership.domain.MembershipRepository;
import com.ppinol.coworkingapp.membership.domain.events.Event;
import com.ppinol.coworkingapp.membership.domain.events.EventPublisher;
import com.ppinol.coworkingapp.membership.domain.model.Membership;
import com.ppinol.coworkingapp.membership.domain.model.MembershipId;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class RegisterPackageCommandHandler {

    private final MembershipRepository membershipRepository;
    private final EventPublisher eventPublisher;

    public RegisterPackageCommandHandler(MembershipRepository membershipRepository,
                                          EventPublisher eventPublisher) {
        this.membershipRepository = membershipRepository;
        this.eventPublisher = eventPublisher;
    }

    public void handle(RegisterPackageCommand command) {
        MembershipId membershipId = MembershipId.from(command.membershipId());
        Membership membership = this.membershipRepository.findById(membershipId);
        if (membership == null) {
            throw new MembershipNotFoundException("MembershipId not found: " + command.membershipId());
        }

        // Register the package subscription on the membership aggregate.
        membership.registerPackage(command.credits(), command.year(), command.month());

        // Retrieve the uncommitted events generated by the aggregate.
        List<Event<?>> events = membership.getUncommittedEvents();

        // Persist the membership's new events into the event store.
        this.membershipRepository.save(membership);

        // Publish the events so that projections and other subscribers can update.
        eventPublisher.publish(events);

        // Mark the events as committed.
        membership.markEventsAsCommitted();
    }
}
